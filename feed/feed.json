{
  "version": "https://jsonfeed.org/version/1",
  "title": "Kha&#39;s - Journeys and times of me",
  "home_page_url": "https://lotusirous.github.io/",
  "feed_url": "https://lotusirous.github.io/feed/feed.json",
  "description": "This place is a note for myself",
  "author": {
    "name": "Your Name Here",
    "url": "https://lotusirous.github.io/about-me/"
  },
  "items": [{
      "id": "https://lotusirous.github.io/posts/encoding-json-thing-in-go/",
      "url": "https://lotusirous.github.io/posts/encoding-json-thing-in-go/",
      "title": "encoding/json is weird",
      "content_html": "<p>Let's consider the following snippet</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"encoding/json\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"log\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> Header <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tAlg <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"alg\"`</span>\n\tTyp <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"typ\"`</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tb <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">`{\"typ\":\"JWS\",\"alg\":\"HS256\",\"ALG\":\"none\"}`</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">var</span> h Header\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%+v\"</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The result is surprising : <code>{Alg:none Typ:JWS}</code></p>\n<p>This cause an security issue for token verification in JWT</p>\n",
      "date_published": "2023-06-17T00:00:00Z"
    },{
      "id": "https://lotusirous.github.io/posts/zP-in-vim/",
      "url": "https://lotusirous.github.io/posts/zP-in-vim/",
      "title": "`zy` and `zp` in recent vim ",
      "content_html": "<p>This task is very common for manipulating the column</p>\n<p>Set 1:</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">|of lines.\n|different lengths.\n|now together.</code></pre>\n<p>Set 2:</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">My blocks\nAll have\nBut are</code></pre>\n<p>Result:</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">My blocks|of lines.\nAll have|different lengths.\nBut are|now together.</code></pre>\n<p>The steps as follows:</p>\n<ul>\n<li>Use <code>c-v</code> and <code>D</code> to copy the line in column from Set 2.</li>\n<li>Go the the first line of Set 1 and paste with <code>zP</code></li>\n</ul>\n",
      "date_published": "2023-02-08T00:00:00Z"
    },{
      "id": "https://lotusirous.github.io/posts/zero-allocated-byte-to-string/",
      "url": "https://lotusirous.github.io/posts/zero-allocated-byte-to-string/",
      "title": "Zero allocated byte to string conversion",
      "content_html": "<p>Go has a built-in function for converting a slice of bytes to a string, but it\ninvolves allocating a new string. If you want to avoid this allocation, you can\nuse a trick that involves the <code>unsafe</code> package.</p>\n<p>I recently learned about this trick from a\n<a href=\"https://twitter.com/juliusvolz/status/1603052194944913409?s=20&amp;t=33gnYg4Lbl6dRMzZFu8X0w\">tweet</a>\nin\n<a href=\"https://github.com/prometheus/prometheus/blob/e1b708200853371517480176da0a03437b3bb2c2/tsdb/index/index.go#L1906\">prometheus repository</a>\nand followed\n<a href=\"https://github.com/golang/go/issues/25484\">the discussion on Github</a>. It turns\nout that this trick was originally used in the\n<a href=\"https://go.dev/src/strings/builder.go#L45\"><code>strings</code> package</a>, and it works by\nusing type coercion to convert the memory address of the slice to a string\npointer, and then dereferencing that pointer to get the string value. Here is\nthe code:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">ByteSlice2String</span><span class=\"token punctuation\">(</span>b <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Here's how it works:</p>\n<ol>\n<li><code>unsafe.Pointer(&amp;bs)</code> takes the memory address of the slice bs and converts\nit to an <code>unsafe.Pointer</code>. An <code>unsafe.Pointer</code> is a special type in the\n<code>unsafe</code> package that can hold the address of any type.</li>\n<li><code>(*string)(unsafe.Pointer(&amp;bs))</code> converts the <code>unsafe.Pointer</code> to a string\npointer by performing type coercion. This creates a new string pointer that\npoints to the same memory address as the slice <code>bs</code>.</li>\n<li><code>*(*string)(unsafe.Pointer(&amp;bs))</code> dereferences the string pointer to get the\nstring value that it points to.</li>\n</ol>\n<h2>Prove it</h2>\n<p>This experiment shows the benchmark between the <code>string(bs)</code> and our\n<code>ByteSlice2String</code> function</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n    someBytes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">`hello`</span><span class=\"token punctuation\">)</span>\n    str       <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkByte2String</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    b<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BuiltIn\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n            str <span class=\"token operator\">=</span> <span class=\"token function\">BuiltIn</span><span class=\"token punctuation\">(</span>someBytes<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">ReportAllocs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    b<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Byte2Slice\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n            str <span class=\"token operator\">=</span> <span class=\"token function\">ByteSlice2String</span><span class=\"token punctuation\">(</span>someBytes<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">ReportAllocs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Benchmark result shows that the function <code>ByteSlice2String</code> has zero allocation\nmemory.</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">goos: darwin\ngoarch: amd64\npkg: github.com/ntk12/temp\ncpu: Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\nBenchmarkBuildString\nBenchmarkBuildString/BuiltIn\nBenchmarkBuildString/BuiltIn-16          75249337         15.88 ns/op        5 B/op        1 allocs/op\nBenchmarkBuildString/Byte2Slice\nBenchmarkBuildString/Byte2Slice-16       324706618          3.652 ns/op        0 B/op        0 allocs/op\nPASS\nok   github.com/ntk12/temp 4.461s</code></pre>\n<h2>When this trick goes wrong</h2>\n<p>Using the <code>unsafe</code> package and type coercion to convert a slice of bytes to a\nstring can lead to unpredictable behavior and can compromise the safety\nguarantees provided by Go. It may also produce incorrect results if the slice of\nbytes does not have the correct memory layout or encoding</p>\n<h2>The new way in go 1.20</h2>\n<p>Go 1.20 adds\n<a href=\"https://github.com/golang/go/issues/53003\"><code>SliceData</code>, <code>String</code>, and <code>StringData</code></a>\nwhich supports our cases in\n<a href=\"https://go-review.googlesource.com/c/go/+/427095\">the CL</a>. You can use the new\nfunction as follows:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">ByteSlice2String</span><span class=\"token punctuation\">(</span>b <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">String2ByteSlice</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Slice</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">StringData</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n",
      "date_published": "2022-12-20T00:00:00Z"
    },{
      "id": "https://lotusirous.github.io/posts/byte-order-in-go/",
      "url": "https://lotusirous.github.io/posts/byte-order-in-go/",
      "title": "How to Detect Byte Order in Go",
      "content_html": "<p>The <a href=\"https://github.com/josharian/native\">native package</a> contains a method for\ndetecting byte order in Go. While this can sometimes lead to program portability\nissues, understanding how the package works can greatly improve the developer\nexperience.</p>\n<p>Byte order, also known as endianness, refers to the way in which a computer\nstores the individual bytes of a multi-byte data type in its memory.\nLittle-endian systems store the least significant byte at the lowest memory\naddress, while big-endian systems store the most significant byte at the lowest\nmemory address</p>\n<p>To detect the byte order of a system when working at a low level, you can use\nthe following snippet:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> Endian binary<span class=\"token punctuation\">.</span>ByteOrder\n\n<span class=\"token keyword\">var</span> IsBigEndian <span class=\"token builtin\">bool</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tb <span class=\"token operator\">:=</span> <span class=\"token function\">uint16</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// one byte</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\tEndian <span class=\"token operator\">=</span> binary<span class=\"token punctuation\">.</span>BigEndian\n\t\tIsBigEndian <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tEndian <span class=\"token operator\">=</span> binary<span class=\"token punctuation\">.</span>LittleEndian\n\t\tIsBigEndian <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>In this particular case, the <code>0xff</code> value is being used as a sentinel value to\ndetect the byte order of the system. The <code>0xff</code> value is chosen because it\nconsists of all 1 bits, which means that the most significant bit of the value\nwill be set to 1.</p>\n<p>In a big-endian system, the most significant byte (which in this case would be\n<code>0xff</code>) would be stored at the lowest memory address. Therefore, if the byte\npointed to by the <code>unsafe.Pointer</code> function is equal to 0, it means that the\nsystem is using a big-endian byte order because the <code>0xff</code> value has been\n&quot;truncated&quot; to just <code>0x00</code> due to the fact that the system is only storing the\nleast significant byte at the lowest memory address.</p>\n",
      "date_published": "2022-12-13T00:00:00Z"
    },{
      "id": "https://lotusirous.github.io/posts/flare-on-challenge-1/",
      "url": "https://lotusirous.github.io/posts/flare-on-challenge-1/",
      "title": "Flare on 2020 - Level 1",
      "content_html": "<p>This challenge is a python that have compiled to windows program. The organizer\nalso gives us a source code of this program. Let's dive into the code by static\nanalysis. We have the following functions</p>\n<pre class=\"language-txt\"><code class=\"language-txt\"> +buy_click : function\n +cat_clicked : function\n +decode_flag : function &lt;--\n +game_screen : function\n +main : function\n +password_check : function &lt;--\n +password_fail_screen : function\n +password_screen : function\n +victory_screen : function\n▼ variables\n    buying\n    current_autoclickers\n    current_coins</code></pre>\n<p>It looks like the program has several functions that may be of interest to us.\nIn particular, the <code>password_check</code> and <code>decode_flag</code> functions stand out as\npotentially important.</p>\n<p>To start, let's take a closer look at the <code>password_check</code> function. This\nfunction is likely responsible for verifying the user's password, so it will be\nimportant to understand how it works and what it does. We can examine the code\nline by line to see what it does and how it operates.</p>\n<p>Next, let's move on to the <code>decode_flag</code> function. This function is probably\nresponsible for decoding the flag that we need to find in order to solve the\nchallenge. By analyzing the code in this function, we can learn more about how\nthe flag is encoded and what we need to do to decode it.</p>\n<p><strong>The <code>password_check</code> function</strong></p>\n<p>Since the program requires user to enter a password with a protect screen, the\ndeveloper implements this feature by 2 functions:</p>\n<ul>\n<li><code>password_screen</code> shows the input text.</li>\n<li><code>password_check</code> checks the password as follows</li>\n</ul>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">password_check</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    altered_key <span class=\"token operator\">=</span> <span class=\"token string\">\"hiptu\"</span>\n    key <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> altered_key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">input</span> <span class=\"token operator\">==</span> key</code></pre>\n<p>The solution is trivial, they key is &quot;ghost&quot; by running the code in python\ninterpreter</p>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token string\">\"hiptu\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p><strong>The <code>decode_flag</code> function</strong></p>\n<p>I discovered that the <code>victory_screen</code> function calls the <code>decode_flag</code> function\nby using the &quot;find references&quot; feature from the Language Server Protocol (LSP).\nThe <code>game_screen</code> function calculates the token value using the following logic:</p>\n<pre class=\"language-py\"><code class=\"language-py\">target_amount <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">36</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">35</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> current_coins <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>target_amount <span class=\"token operator\">-</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> current_coins <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span>target_amount <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        current_coins <span class=\"token operator\">-=</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">20</span>\n    victory_screen<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>current_coins <span class=\"token operator\">/</span> <span class=\"token number\">10</span> <span class=\"token operator\">**</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span></code></pre>\n<p>In order to display the victory screen and see the flag, the <code>current_coins</code>\nvariable must have a value greater than <code>(target_amount - 2 ** 20)</code>. To achieve\nthis, we can use the following code:</p>\n<pre class=\"language-python\"><code class=\"language-python\">target_amount <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">36</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">35</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># +1 to jump inside the while loop.</span>\ncurrent_coins <span class=\"token operator\">=</span> target_amount <span class=\"token operator\">-</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">20</span>\n<span class=\"token keyword\">while</span> current_coins <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span>target_amount <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    current_coins <span class=\"token operator\">-=</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">20</span>\ntoken <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>current_coins <span class=\"token operator\">/</span> <span class=\"token number\">10</span> <span class=\"token operator\">**</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span></code></pre>\n<p>With the <code>token</code> value calculated, we can now call the <code>decode_flag</code> function to\ndecode the flag and print it to the screen:</p>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>decode_flag<span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nidle_with_kitty@flare<span class=\"token operator\">-</span>on<span class=\"token punctuation\">.</span>com</code></pre>\n",
      "date_published": "2020-10-17T00:00:00Z"
    }
  ]
}
