{
  "version": "https://jsonfeed.org/version/1",
  "title": "Kha&#39;s - Journeys and times of me",
  "home_page_url": "https://lotusirous.github.io/",
  "feed_url": "https://lotusirous.github.io/feed/feed.json",
  "description": "This place is a note for myself",
  "author": {
    "name": "Your Name Here",
    "url": "https://lotusirous.github.io/about-me/"
  },
  "items": [{
      "id": "https://lotusirous.github.io/posts/golink/",
      "url": "https://lotusirous.github.io/posts/golink/",
      "title": "Golink - URL shorten service",
      "content_html": "<p>This is the note that I have learn from analyzing pro golang code. The first\npost in this series is <code>golink</code>.</p>\n<h1>Golink</h1>\n",
      "date_published": "2022-12-01T00:00:00Z"
    },{
      "id": "https://lotusirous.github.io/posts/function-snippet-for-go/",
      "url": "https://lotusirous.github.io/posts/function-snippet-for-go/",
      "title": "Generate return values in Neovim for Go.",
      "content_html": "<p>I really love error handling in go because of clarity. However, typing <code>if err != nil</code> every error handling error is annoying.\nThis post describes the step to combine the <a href=\"https://github.com/nvim-treesitter/nvim-treesitter\">nvim-treesitter</a> and <a href=\"https://github.com/L3MON4D3/LuaSnip\">LuaSnip</a> to generate the return values. It makes you type less keystrokes than before.</p>\n<h2>Tree sitter</h2>\n<p>Tree-sitter parses the go file and generate the AST</p>\n<pre class=\"language-lua\"><code class=\"language-lua\">vim<span class=\"token punctuation\">.</span>treesitter<span class=\"token punctuation\">.</span><span class=\"token function\">set_query</span><span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"go\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"LuaSnip_Result\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">[[ [<br>    (method_declaration result: (_) @id)<br>    (function_declaration result: (_) @id)<br>    (func_literal result: (_) @id)<br>  ] ]]</span><br><span class=\"token punctuation\">)</span></code></pre>\n<p>You query the method, function, name and saves to the variable <code>LuaSnip_Result</code></p>\n<h2>Assign the snippet</h2>\n<p>I honestly admit that the syntax for LuaSnip is quite ugly.</p>\n<pre class=\"language-lua\"><code class=\"language-lua\">    <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"iferr\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"val\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>        t <span class=\"token string\">\", \"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"err\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>        t <span class=\"token string\">\" := \"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"f\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>        <span class=\"token function\">t</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"if \"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>        <span class=\"token function\">same</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>        <span class=\"token function\">t</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\" != nil {\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\treturn \"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>        <span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> go_ret_vals<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>        <span class=\"token function\">t</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"}\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>        <span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></code></pre>\n<p>Give it a try</p>\n<pre><code>iferr&lt;c-k&gt;\n</code></pre>\n<p>And BOOOMMMM !!</p>\n<h2>Discussion</h2>\n<p>This method reduces your typing keystrokes. However, the current method does not support the function that does not return any value. Neovim will raise an error for that.</p>\n",
      "date_published": "2022-05-28T00:00:00Z"
    },{
      "id": "https://lotusirous.github.io/posts/smart-contract-practices/",
      "url": "https://lotusirous.github.io/posts/smart-contract-practices/",
      "title": "Smart contract hacking resources",
      "content_html": "<p>I'm using the following resources to build up the background to learn/hack the smart contract</p>\n<h2>Background</h2>\n<p>Books:</p>\n<ul>\n<li>Mastering Ethereum: Building Smart Contracts and DApps</li>\n<li>Building Ethereum DApps: Decentralized Applications on the Ethereum Blockchain</li>\n</ul>\n<p>Tutorials:</p>\n<ul>\n<li><a href=\"https://ethereum.org/en/developers/learning-tools/\">All tutorials and learning-by-coding from ETH</a></li>\n<li>Learn Solidity</li>\n<li><a href=\"https://cryptozombies.io/\">CryptoZombies</a></li>\n<li><a href=\"https://solidity-by-example.org/\">Solidity by Example</a></li>\n<li>Solidity Docs</li>\n<li>Learn how to use <a href=\"https://hardhat.org/\">HardHat</a></li>\n<li>Familiarize yourself with widely used contracts (EIP 20)</li>\n</ul>\n<h2>Challenges</h2>\n<ul>\n<li>Read writeups &amp; postmortems</li>\n<li>Do some CTF's</li>\n</ul>\n<h2>Resources</h2>\n<ul>\n<li><a href=\"https://youtu.be/M576WGiDBdQ\">Solidity, Blockchain, and Smart Contract Course – Beginner to Expert Python Tutorial</a></li>\n<li><a href=\"https://blog.sigmaprime.io/-solidity-security.html\">Solidity Security: Comprehensive list of known attack vectors and common anti-patterns</a></li>\n<li><a href=\"https://swcregistry.io/\">Smart Contract Weakness Classification and Test Cases</a></li>\n<li><a href=\"https://consensys.github.io/smart-contract-best-practices/\">Ethereum Smart Contract Security Best Practices</a></li>\n</ul>\n",
      "date_published": "2021-10-17T00:00:00Z"
    },{
      "id": "https://lotusirous.github.io/posts/flare-on-challenge-1/",
      "url": "https://lotusirous.github.io/posts/flare-on-challenge-1/",
      "title": "[Flare on 2020] Level 1",
      "content_html": "<p>This article belongs to the flare on write up series</p>\n<h2>Level 1</h2>\n<p>This challenge is a python that have compiled to windows program. The organizer\nalso gives us a source code of this program. Let's dive into the code by static\nanalysis. We have the following functions</p>\n<pre class=\"language-txt\"><code class=\"language-txt\"> +buy_click : function<br> +cat_clicked : function<br> +decode_flag : function &lt;--<br> +game_screen : function<br> +main : function<br> +password_check : function &lt;--<br> +password_fail_screen : function<br> +password_screen : function<br> +victory_screen : function<br>▼ variables<br>    buying<br>    current_autoclickers<br>    current_coins</code></pre>\n<p>2 functions <code>password_check</code> and <code>decode_flag</code> are suspicious. Let's parse the\nfunction step by step.</p>\n<p><strong>The <code>password_check</code> function</strong></p>\n<p>Since the program requires user to enter a password with a protect screen, the\ndeveloper implements this feature by 2 functions:</p>\n<ul>\n<li><code>password_screen</code> shows the input text.</li>\n<li><code>password_check</code> checks the password as follows</li>\n</ul>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">password_check</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    altered_key <span class=\"token operator\">=</span> <span class=\"token string\">\"hiptu\"</span><br>    key <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> altered_key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">input</span> <span class=\"token operator\">==</span> key</code></pre>\n<p>The solution is super simple, they key is &quot;ghost&quot; by running the code in python\ninterpreter <code>print(&quot;&quot;.join([chr(ord(x) - 1) for x in &quot;hiptu&quot;]))</code></p>\n<p><strong>The <code>decode_flag</code> function</strong></p>\n<p>I found the function <code>victory_screen(token)</code> calls the <code>decode_flag</code> by the find\nreferences feature from\n<a href=\"https://microsoft.github.io/language-server-protocol/\">LSP</a>, The <code>game_screen</code>\ncomputes the <code>token</code> by the following logic:</p>\n<pre class=\"language-py\"><code class=\"language-py\">target_amount <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">36</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">35</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">if</span> current_coins <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>target_amount <span class=\"token operator\">-</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">while</span> current_coins <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span>target_amount <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        current_coins <span class=\"token operator\">-=</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">20</span><br>    victory_screen<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>current_coins <span class=\"token operator\">/</span> <span class=\"token number\">10</span> <span class=\"token operator\">**</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span></code></pre>\n<p>Since we need the program to show the victory screen, the <code>current_coins</code> should\nhave the value greater than <code>(target_amount - 2 ** 20)</code></p>\n<pre class=\"language-python\"><code class=\"language-python\">target_amount <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">36</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">35</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># +1 to jump inside the while loop.</span><br>current_coins <span class=\"token operator\">=</span> target_amount <span class=\"token operator\">-</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">20</span><br><span class=\"token keyword\">while</span> current_coins <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span>target_amount <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    current_coins <span class=\"token operator\">-=</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">20</span><br>token <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>current_coins <span class=\"token operator\">/</span> <span class=\"token number\">10</span> <span class=\"token operator\">**</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Now I can call the <code>decode_flag</code> with the computed token and get the flag.</p>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>decode_flag<span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>idle_with_kitty@flare<span class=\"token operator\">-</span>on<span class=\"token punctuation\">.</span>com</code></pre>\n",
      "date_published": "2020-10-17T00:00:00Z"
    },{
      "id": "https://lotusirous.github.io/posts/data-mapper-in-go/",
      "url": "https://lotusirous.github.io/posts/data-mapper-in-go/",
      "title": "The right way to do web service in go",
      "content_html": "<h2>The problem of ORM library</h2>\n<p>Writing a data access layer is tedious for developers who are not familiar with\nSQL and the Paradox of Choice with ORM libraries. Many developers usually use a\nmost-stared ORM library on Github and might end up with unexpected behaviors\nbecause some features in the library do over-engineering their requirements.</p>\n<!--more-->\n<p>The object/relational mapping problem is <em>hard</em> since essentially what an ORM\nlibrary is doing is synchronizing between two quite different representations of\ndata. Many blog posts have been discussing for years by many big authors,\nincluding <a href=\"https://martinfowler.com/bliki/OrmHate.html\">OrmHate</a> by Martin\nFowler (not against ORM, but worth mentioning anyway),\n<a href=\"https://blog.codinghorror.com/object-relational-mapping-is-the-vietnam-of-computer-science/\">Object-Relational Mapping Is the Vietnam of Computer Science</a>\nby Jeff Atwood, The Vietnam of Computer Science by Ted Neward, ORM Is an\nAnti-Pattern by Laurie Voss, and many others.</p>\n<p>Starting your baby steps with a\n<a href=\"https://www.yaplex.com/blog/micro-orm-vs-orm/\">Micro-ORM</a> seems to be a good\nchoice because of simplicity and maintainability. In this tutorial, I will show\nyou the steps to build a micro ORM was taken from\n<a href=\"https://github.com/drone/drone\">drone</a> - a elegant go project structure.</p>\n<h2>The design of data mapper</h2>\n<p>Before jump into the implementation detail, let's summarize the definition of\ndata mapper.</p>\n<blockquote>\n<p>Data mapper is a layer of mappers that moves data between objects and a\ndatabase while keeping them independent of each other and the mapper itself.</p>\n</blockquote>\n<p>A data mapper contains 3 parts from the definition: an object, a mapper and a\ndatabase connection. In this post, I use a <code>User</code> object existed in many system\nand a <code>UserStore</code> to group data access actions on a data store. <code>UserStore</code>\ndefines domain logic to manipulate the data from data store. Each action\ncontains a mapper to move data between application objects and database. For\nexample, a <code>Create</code> method have a mapper to translate a object to <code>CREATE</code> SQL\nstatement for creating a new user record in the table. The database connection\nwill be established from the main function by dependency injection.</p>\n<p>Figure 1 depicts a relationship between a user object and group of mapper\ninterface and database.</p>\n<p><img src=\"/posts/image/data-mapper-diagram.svg\" alt=\"User and UserStore\"></p>\n<p>The following <code>User</code> struct contains 7 properties: login (<code>login</code>), active\n(<code>active</code>), showing (<code>avatar</code>) and tracking (<code>created, updated, lastLogin</code>). A\ntricky type <code>int64</code> is using for tracking properties to store timestamp because\ntimestamp not only removes a couple between time and server time zone compare to\nparsing <code>string</code> format but also does not depends on timezone.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// User represents a user of the system.</span><br><span class=\"token keyword\">type</span> User <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>  Login     <span class=\"token builtin\">string</span><br>  Email     <span class=\"token builtin\">string</span><br>  Avatar    <span class=\"token builtin\">string</span><br>  Active    <span class=\"token builtin\">bool</span><br>  LastLogin <span class=\"token builtin\">int64</span><br>  Created   <span class=\"token builtin\">int64</span><br>  Updated   <span class=\"token builtin\">int64</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>The <code>UserStore</code> methods are divided into commands (<code>Create, Update, Delete</code>) and\nqueries (<code>Find, List, FindLogin, FindActive, Count</code>) for write/read operations\nrespectively. The command group changes the state of <code>User</code> object while queries\ngroup only read the <code>User</code> object.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// UserStore defines operations for working with users.</span><br><span class=\"token keyword\">type</span> UserStore <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span><br><br>  <span class=\"token comment\">// Create persists a new user to the datastore.</span><br>  <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>User<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span><br><br>  <span class=\"token comment\">// Update persists an updated user to the datastore.</span><br>  <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>User<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span><br><br>  <span class=\"token comment\">// Delete deletes a user from the datastore.</span><br>  <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>User<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span><br><br>  <span class=\"token comment\">// Find returns a user from the data store.</span><br>  <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>User<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span><br><br>  <span class=\"token comment\">// List returns a list of users from the datastore.</span><br>  <span class=\"token function\">List</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>User<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span><br><br>  <span class=\"token comment\">// FindLogin returns a user from the datastore by username.</span><br>  <span class=\"token function\">FindLogin</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>User<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span><br><br>  <span class=\"token comment\">// FindActive returns a list of active users from the datastore.</span><br>  <span class=\"token function\">FindActive</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>User<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span><br><br>  <span class=\"token comment\">// Count returns a count of users.</span><br>  <span class=\"token function\">Count</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int64</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>I use <code>context.Context</code> as a first parameter for each method to carries\ndeadlines, cancellation signals, and other request-scoped values.</p>\n<h2>Database connection</h2>\n<p>Although the built-in library <code>database/sql</code> provides a generic sql driver, it\ndoes not provides naming query statement and binding execution which provided by\na <code>sqlx</code>. A common <code>Locker</code> interface to lock and unlock a share resource\n(SQLite for testing) and distinguish driver type with <code>driver</code>.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Driver defines the database driver.</span><br><span class=\"token keyword\">type</span> Driver <span class=\"token builtin\">int</span><br><br><span class=\"token comment\">// Database driver enums.</span><br><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span><br>  Sqlite <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><br>  Mysql<br>  Postgres<br><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// DB is a pool of zero or more underlying connections to</span><br><span class=\"token comment\">// the database.</span><br><span class=\"token keyword\">type</span> DB <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>  conn   <span class=\"token operator\">*</span>sqlx<span class=\"token punctuation\">.</span>DB<br>  lock   Locker<br>  driver Driver<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// A Locker represents an object that can be locked and unlocked.</span><br><span class=\"token keyword\">type</span> Locker <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>  <span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>  <span class=\"token function\">RLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>  <span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>The pattern <strong>commands</strong> and <strong>queries</strong> is implemented by <code>Queryer</code>, <code>Binder</code>\nand <code>Execer</code> helper interfaces. <code>Binder</code> maps parameters to build a query while\n<code>Queryer</code> reads a row in database to return a <code>sql.Row</code> and the <code>Execer</code>\nperforms an execution with a given query.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> <span class=\"token punctuation\">(</span><br>  <span class=\"token comment\">// Queryer interface defines a set of methods for</span><br>  <span class=\"token comment\">// querying the database.</span><br>  Queryer <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>query <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>sql<span class=\"token punctuation\">.</span>Rows<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span><br>    <span class=\"token function\">QueryRow</span><span class=\"token punctuation\">(</span>query <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>sql<span class=\"token punctuation\">.</span>Row<br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token comment\">// Binder interface defines database field bindings.</span><br>  Binder <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">BindNamed</span><span class=\"token punctuation\">(</span>query <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> arg <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token comment\">// Execer interface defines a set of methods for executing</span><br>  <span class=\"token comment\">// read and write commands against the database.</span><br>  Execer <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span><br>    Queryer<br>    <span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>query <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">.</span>Result<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">)</span></code></pre>\n<p><code>View</code> and <code>Lock</code> wraps a read/write to database in a safe action with desired\nlock.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// View executes a function within the context of a managed read-only</span><br><span class=\"token comment\">// transaction. Any error that is returned from the function is returned</span><br><span class=\"token comment\">// from the View() method.</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>DB<span class=\"token punctuation\">)</span> <span class=\"token function\">View</span><span class=\"token punctuation\">(</span>fn <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>Queryer<span class=\"token punctuation\">,</span> Binder<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>  db<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">RLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>  err <span class=\"token operator\">:=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>conn<span class=\"token punctuation\">,</span> db<span class=\"token punctuation\">.</span>conn<span class=\"token punctuation\">)</span><br>  db<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>  <span class=\"token keyword\">return</span> err<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Lock obtains a write lock to the database (sqlite only) and executes</span><br><span class=\"token comment\">// a function. Any error that is returned from the function is returned</span><br><span class=\"token comment\">// from the Lock() method.</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>DB<span class=\"token punctuation\">)</span> <span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span>fn <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>Execer<span class=\"token punctuation\">,</span> Binder<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>  db<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>  err <span class=\"token operator\">:=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>conn<span class=\"token punctuation\">,</span> db<span class=\"token punctuation\">.</span>conn<span class=\"token punctuation\">)</span><br>  db<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>  <span class=\"token keyword\">return</span> err<br><span class=\"token punctuation\">}</span></code></pre>\n<p>The <code>Update</code> action requires rollback a executed action when error happened. A\ntricky <code>defer</code> wraps <code>recover</code> and <code>commit</code> to support atomic transaction.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Update executes a function within the context of a read-write managed</span><br><span class=\"token comment\">// transaction. If no error is returned from the function then the</span><br><span class=\"token comment\">// transaction is committed. If an error is returned then the entire</span><br><span class=\"token comment\">// transaction is rolled back. Any error that is returned from the function</span><br><span class=\"token comment\">// or returned from the commit is returned from the Update() method.</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>db <span class=\"token operator\">*</span>DB<span class=\"token punctuation\">)</span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span>fn <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>Execer<span class=\"token punctuation\">,</span> Binder<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  db<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>  <span class=\"token keyword\">defer</span> db<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>  tx<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span>conn<span class=\"token punctuation\">.</span><span class=\"token function\">Begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>  <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> err<br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> p <span class=\"token operator\">:=</span> <span class=\"token function\">recover</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>      err <span class=\"token operator\">=</span> tx<span class=\"token punctuation\">.</span><span class=\"token function\">Rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>      debug<span class=\"token punctuation\">.</span><span class=\"token function\">PrintStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>      tx<span class=\"token punctuation\">.</span><span class=\"token function\">Rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>      err <span class=\"token operator\">=</span> tx<span class=\"token punctuation\">.</span><span class=\"token function\">Commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>  err <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span> db<span class=\"token punctuation\">.</span>conn<span class=\"token punctuation\">)</span><br>  <span class=\"token keyword\">return</span> err<br><span class=\"token punctuation\">}</span></code></pre>\n<h2>The mapper detail</h2>\n<p>The declaration of <code>queryBase</code> is using for mapping fields. Since the result\nreads fields from <code>SELECT</code> statement, it shares the mapping with the child\nqueries. For example, the <code>queryKey</code> is our domain logic to find a user by a\ngiven id. The usage of <code>SELECT * FROM users</code> is not clear which fields is\nreturned from database in order to guaranty the fields order and data types.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">const</span> queryBase <span class=\"token operator\">=</span> <span class=\"token string\">`<br>SELECT<br>user_id,<br>user_login,<br>user_email,<br>user_avatar,<br>user_active,<br>user_last_login,<br>user_created,<br>user_updated,<br>`</span><br><br><span class=\"token keyword\">const</span> queryKey <span class=\"token operator\">=</span> queryBase <span class=\"token operator\">+</span> <span class=\"token string\">`<br>FROM users<br>WHERE user_id = :user_id<br>`</span></code></pre>\n<p>We do fields mapping as follows:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// helper function converts the User structure to a set</span><br><span class=\"token comment\">// of named query parameters.</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">toParams</span><span class=\"token punctuation\">(</span>u <span class=\"token operator\">*</span>core<span class=\"token punctuation\">.</span>User<span class=\"token punctuation\">)</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><br>\t\t<span class=\"token string\">\"user_id\"</span><span class=\"token punctuation\">:</span>         u<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span><br>\t\t<span class=\"token string\">\"user_login\"</span><span class=\"token punctuation\">:</span>      u<span class=\"token punctuation\">.</span>Login<span class=\"token punctuation\">,</span><br>\t\t<span class=\"token string\">\"user_email\"</span><span class=\"token punctuation\">:</span>      u<span class=\"token punctuation\">.</span>Email<span class=\"token punctuation\">,</span><br>\t\t<span class=\"token string\">\"user_avatar\"</span><span class=\"token punctuation\">:</span>     u<span class=\"token punctuation\">.</span>Avatar<span class=\"token punctuation\">,</span><br>\t\t<span class=\"token string\">\"user_active\"</span><span class=\"token punctuation\">:</span>     u<span class=\"token punctuation\">.</span>Active<span class=\"token punctuation\">,</span><br>\t\t<span class=\"token string\">\"user_last_login\"</span><span class=\"token punctuation\">:</span> u<span class=\"token punctuation\">.</span>LastLogin<span class=\"token punctuation\">,</span><br>\t\t<span class=\"token string\">\"user_created\"</span><span class=\"token punctuation\">:</span>    u<span class=\"token punctuation\">.</span>Created<span class=\"token punctuation\">,</span><br>\t\t<span class=\"token string\">\"user_updated\"</span><span class=\"token punctuation\">:</span>    u<span class=\"token punctuation\">.</span>Updated<span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// helper function scans the sql.Row and copies the column</span><br><span class=\"token comment\">// values to the destination object.</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">scanRow</span><span class=\"token punctuation\">(</span>scanner db<span class=\"token punctuation\">.</span>Scanner<span class=\"token punctuation\">,</span> dest <span class=\"token operator\">*</span>core<span class=\"token punctuation\">.</span>User<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><br>\t\t<span class=\"token operator\">&amp;</span>dest<span class=\"token punctuation\">.</span>Login<span class=\"token punctuation\">,</span><br>\t\t<span class=\"token operator\">&amp;</span>dest<span class=\"token punctuation\">.</span>Email<span class=\"token punctuation\">,</span><br>\t\t<span class=\"token operator\">&amp;</span>dest<span class=\"token punctuation\">.</span>Avatar<span class=\"token punctuation\">,</span><br>\t\t<span class=\"token operator\">&amp;</span>dest<span class=\"token punctuation\">.</span>Active<span class=\"token punctuation\">,</span><br>\t\t<span class=\"token operator\">&amp;</span>dest<span class=\"token punctuation\">.</span>LastLogin<span class=\"token punctuation\">,</span><br>\t\t<span class=\"token operator\">&amp;</span>dest<span class=\"token punctuation\">.</span>Created<span class=\"token punctuation\">,</span><br>\t\t<span class=\"token operator\">&amp;</span>dest<span class=\"token punctuation\">.</span>Updated<span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>The usage of <code>interface{}</code> gives a generic type to map each field in <code>User</code>\nstruct to map with a field in a record from SQL table. However, a drawback of\ntype checking by compiler when compiling the mapper. We can overcome this issue\nwith a wring a unit test.</p>\n<p>If we have many SQL statements, we can take advantage of finding similar word by\neditors (<code>cmd + d</code> in sublime text for example)</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Find returns a user from the datastore.</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>userStore<span class=\"token punctuation\">)</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> id <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>core<span class=\"token punctuation\">.</span>User<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tout <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>core<span class=\"token punctuation\">.</span>User<span class=\"token punctuation\">{</span>ID<span class=\"token punctuation\">:</span> id<span class=\"token punctuation\">}</span><br>\terr <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span><span class=\"token function\">View</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>queryer db<span class=\"token punctuation\">.</span>Queryer<span class=\"token punctuation\">,</span> binder db<span class=\"token punctuation\">.</span>Binder<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>\t\tparams <span class=\"token operator\">:=</span> <span class=\"token function\">toParams</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span><br>\t\tquery<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> binder<span class=\"token punctuation\">.</span><span class=\"token function\">BindNamed</span><span class=\"token punctuation\">(</span>queryKey<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">return</span> err<br>\t\t<span class=\"token punctuation\">}</span><br>\t\trow <span class=\"token operator\">:=</span> queryer<span class=\"token punctuation\">.</span><span class=\"token function\">QueryRow</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> args<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">scanRow</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">return</span> out<span class=\"token punctuation\">,</span> err<br><span class=\"token punctuation\">}</span></code></pre>\n<h2>Wrap-up</h2>\n<p>I have illustrated the baby step to create a micro ORM for mapping <code>User</code> data.\nThe pattern approach provides a just enough technique for solving problems. The\nmore detail can be found on <a href=\"https://github.com/lotusirous/realworld\">Github</a>\nwith an implemented\n<a href=\"https://github.com/gothinkster/realworld\">real world application</a>.</p>\n<p>I hope this article will help you figure out how to design a good code in Go\nwhen working with SQL databases.</p>\n",
      "date_published": "2020-10-17T00:00:00Z"
    }
  ]
}
