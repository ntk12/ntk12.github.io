{
  "version": "https://jsonfeed.org/version/1",
  "title": "Kha&#39;s - Journeys and times of me",
  "home_page_url": "https://lotusirous.github.io/",
  "feed_url": "https://lotusirous.github.io/feed/feed.json",
  "description": "This place is a note for myself",
  "author": {
    "name": "Your Name Here",
    "url": "https://lotusirous.github.io/about-me/"
  },
  "items": [{
      "id": "https://lotusirous.github.io/posts/semgrep-with-vim/",
      "url": "https://lotusirous.github.io/posts/semgrep-with-vim/",
      "title": "Using semgrep in vim",
      "content_html": "<p>In this post, I want to share my workflow for harnessing the power of Semgrep in\nVim. Semgrep, a robust code analysis tool, can significantly enhance your\ncodebase investigation process. Let me take you through my method for optimizing\nand simplifying code pattern searches effectively within Neovim.</p>\n<p>My approach to using Semgrep is rather straightforward. I execute Semgrep from\nthe command line to search for specific code patterns. For instance, you can\nlook for a pattern in a Go codebase like this:</p>\n<pre class=\"language-sh\"><code class=\"language-sh\">semgrep <span class=\"token parameter variable\">--quiet</span> <span class=\"token parameter variable\">--lang</span><span class=\"token operator\">=</span>go <span class=\"token parameter variable\">--pattern</span><span class=\"token operator\">=</span><span class=\"token string\">\"func min(...)\"</span></code></pre>\n<h2>My Refined Workflow</h2>\n<p>Here's the step-by-step approach I've refined for maximizing Semgrep's\ncapabilities:</p>\n<ol>\n<li><strong>Pattern Configuration</strong>: I begin by configuring the code pattern directly\nin a dedicated file, typically named semgrep_rule.yml.</li>\n<li><strong>Running Semgrep</strong>: After configuring the pattern, I save the configuration\nfile and execute Semgrep to initiate the code search.</li>\n<li><strong>Loading Results in Neovim</strong>: Once Semgrep completes its search, I promptly\nload the results directly into Neovim for in-depth investigation.</li>\n</ol>\n<p>To streamline this process, I've created a convenient script. It's worth noting\nthat I use a random name for added flexibility when working on multiple\nsessions:</p>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token keyword\">function</span> <span class=\"token function-name function\">run_semgrep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"># Generate a random string for file name</span>\n  <span class=\"token assign-left variable\">random_value</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> /dev/urandom <span class=\"token operator\">|</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">LC_ALL</span></span><span class=\"token operator\">=</span>C <span class=\"token function\">tr</span> <span class=\"token parameter variable\">-dc</span> <span class=\"token string\">'a-zA-Z0-9'</span> <span class=\"token operator\">|</span> <span class=\"token function\">fold</span> <span class=\"token parameter variable\">-w</span> <span class=\"token number\">6</span> <span class=\"token operator\">|</span> <span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">1</span><span class=\"token variable\">)</span></span>\n\n  <span class=\"token comment\"># Create a temporary config file with a random value and a .yaml prefix</span>\n  <span class=\"token assign-left variable\">config_tempfile</span><span class=\"token operator\">=</span><span class=\"token string\">\"/tmp/config.<span class=\"token variable\">${random_value}</span>.yaml\"</span>\n\n  <span class=\"token comment\"># Copy the content of ~/.semgrep/config.yml to the temporary config file</span>\n  <span class=\"token function\">cp</span> ~/.semgrep/config.yml <span class=\"token string\">\"<span class=\"token variable\">$config_tempfile</span>\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Make config file <span class=\"token variable\">$config_tempfile</span>\"</span>\n\n\n  <span class=\"token comment\"># Open the temporary config file in nvim for editing</span>\n  nvim <span class=\"token string\">\"<span class=\"token variable\">$config_tempfile</span>\"</span>\n\n  <span class=\"token comment\"># Create a temporary output file with a random value</span>\n  <span class=\"token assign-left variable\">output_tempfile</span><span class=\"token operator\">=</span><span class=\"token string\">\"/tmp/output.<span class=\"token variable\">${random_value}</span>.txt\"</span>\n\n  <span class=\"token comment\"># After closing nvim, execute semgrep</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Running semgrep .. Please wait'</span>\n  semgrep <span class=\"token parameter variable\">--vim</span> <span class=\"token parameter variable\">--quiet</span> <span class=\"token parameter variable\">-f</span> <span class=\"token string\">\"<span class=\"token variable\">$config_tempfile</span>\"</span> <span class=\"token operator\">></span> <span class=\"token string\">\"<span class=\"token variable\">$output_tempfile</span>\"</span>\n\n  <span class=\"token comment\"># Check if the output file is not empty</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-s</span> <span class=\"token string\">\"<span class=\"token variable\">$output_tempfile</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token comment\"># Open the output tempfile with nvim</span>\n    nvim <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\":cfile <span class=\"token variable\">$output_tempfile</span>\"</span>\n  <span class=\"token keyword\">fi</span>\n\n  <span class=\"token comment\"># Clean up the temporary files</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Clean up ... <span class=\"token variable\">$config_tempfile</span>\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Clean up ... <span class=\"token variable\">$output_tempfile</span>\"</span>\n  <span class=\"token function\">rm</span> <span class=\"token string\">\"<span class=\"token variable\">$config_tempfile</span>\"</span>\n  <span class=\"token function\">rm</span> <span class=\"token string\">\"<span class=\"token variable\">$output_tempfile</span>\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Here's an example configuration for finding structs that contain a function as a\nfield:</p>\n<pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> find<span class=\"token punctuation\">-</span>field<span class=\"token punctuation\">-</span>func\n    <span class=\"token key atrule\">patterns</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">pattern</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          type $T struct {\n            $FIELD func(...) $RESULT\n          }</span>\n    <span class=\"token key atrule\">message</span><span class=\"token punctuation\">:</span> Semgrep found matches\n    <span class=\"token key atrule\">languages</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> go\n    <span class=\"token key atrule\">severity</span><span class=\"token punctuation\">:</span> WARNING</code></pre>\n<p>To make my life easier, I've created an alias:</p>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">sg</span><span class=\"token operator\">=</span><span class=\"token string\">\"run_semgrep\"</span></code></pre>\n<p>In summary, this workflow eliminates the need for manual codebase investigation,\nmaking my development process significantly more efficient.</p>\n",
      "date_published": "2023-10-18T00:00:00Z"
    },{
      "id": "https://lotusirous.github.io/posts/http-client-testing-in-go/",
      "url": "https://lotusirous.github.io/posts/http-client-testing-in-go/",
      "title": "Testing http client in Go",
      "content_html": "<h2>Http client in go</h2>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Client <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  httpClient <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Client\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// do some stuff</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>In the caller</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>s Service<span class=\"token punctuation\">)</span> <span class=\"token function\">Login</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// do some sutff</span>\n  <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">.</span><span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> err\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// do more stuffs</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2>Define an interface for Client</h2>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Sends</span>\n<span class=\"token keyword\">type</span> Sender <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>IN the service</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Service <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  Client Sender\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Now, we can do the test</p>\n<h2>Mock the http with <code>RoundTripper</code></h2>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> client <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  httpClient <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Client\n<span class=\"token punctuation\">}</span></code></pre>\n<p>In the test file</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> client <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  httpClient <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Client\n<span class=\"token punctuation\">}</span></code></pre>\n",
      "date_published": "2023-10-13T00:00:00Z"
    },{
      "id": "https://lotusirous.github.io/posts/fuzzy-finding-your-bookmarks/",
      "url": "https://lotusirous.github.io/posts/fuzzy-finding-your-bookmarks/",
      "title": "Fuzzy Finding Your Bookmarks",
      "content_html": "<p>Have you ever felt overwhelmed by your bookmarks, desperately trying to find\nthat one elusive link? If so, you're not alone. Many people struggle to keep\ntheir bookmarks organized and accessible.</p>\n<p>Major browsers like Brave and Chrome offer a folder-based organization system,\nwhich can quickly become unwieldy. Even when resorting to searching through\nbrowser-specific URLs like <code>brave://bookmarks/?q=&lt;your keyword&gt;</code>, it often falls\nshort because you may not remember the exact title or link.</p>\n<h2>Bookmark's data structure</h2>\n<p>At its core, a bookmark is quite straightforward. It consists of three elements:\na title, a link to the webpage, and the action of opening that link. Here's a\nsimple breakdown:</p>\n<ul>\n<li>Title: The name you've given to the bookmark (e.g., Google).</li>\n<li>Link: The web address associated with the bookmark (e.g., <a href=\"http://google.com\">http://google.com</a>).</li>\n<li>Open action: The action you want to perform when you click on the bookmark,\nwhich is usually to open the link.</li>\n</ul>\n<h2>Why not store your bookmarks in a text file instead ?</h2>\n<p>This may seem like a simple solution, but it offers several advantages over\ntraditional bookmark managers:</p>\n<ul>\n<li><strong>Simplified Search</strong>: It's much easier to search a text file for a specific\nkeyword than it is to search through a tree-like structure like a folder\nhierarchy. You can use a variety of tools to search and filter your bookmarks,\nincluding regular expressions and fuzzy search.</li>\n<li><strong>Version control</strong>: A text file can be easily tracked by version control.\nThis means that you can easily recover your bookmarks if something goes wrong,\nor if you want to revert to a previous version.</li>\n<li><strong>Direct Editing in Your Editor</strong>: You can modify your bookmarks directly in\nyour text editor, such as Vim. This makes it incredibly convenient to update\nand organize your bookmarks with the tools you are already familiar with.</li>\n<li><strong>Fuzzy Finding for Titles and Links</strong>: With this method, you can search for\nyour bookmarks using either the title or the link. This is a significant\nimprovement over traditional bookmark managers, which typically only allow you\nto search by title.</li>\n</ul>\n<p>Here's a simple representation of how it looks:</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">Google |https://google.com\nYoutube |https://youtube.com</code></pre>\n<p>We use the pipe character (<code>|</code>) as our delimiter because it's not part of URI\nstandards (RFC 3986). Thus, it doesn't clash with bookmark titles or URLs, and\nimproves readability. While it's not an official URI standard delimiter, its\nadoption in this context is a convention that enhances bookmark management.</p>\n<p>By storing this content in a file <code>$HOME/.bookmarks</code>, you gain the ability to\ntrack and search for bookmarks by title or link. Additionally, macOS supports\nopening links in your default browser by default. And to make things even\nsimpler, you can achieve all this with a single-line solution:</p>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">bm</span><span class=\"token operator\">=</span><span class=\"token string\">\"cat ~/.bookmarks |fzf | cut -d '|' -f 2 | awk '{\\<span class=\"token variable\">$1</span>=\\<span class=\"token variable\">$1</span>;print}' |xargs open\"</span></code></pre>\n<p>If you need a practical solution for better bookmark management, give it a try.</p>\n",
      "date_published": "2023-09-16T00:00:00Z"
    },{
      "id": "https://lotusirous.github.io/posts/golinkname/",
      "url": "https://lotusirous.github.io/posts/golinkname/",
      "title": "Go linkname directive",
      "content_html": "<h2><code>go:linkname</code> directive</h2>\n<p>The go document says:</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">//go:linkname localname [importpath.name]</code></pre>\n<blockquote>\n<p>The //go:linkname directive instructs the compiler to use &quot;<a href=\"http://importpath.name\">importpath.name</a>&quot; as\nthe object file symbol name for the variable or function declared as\n&quot;localname&quot; in the source code. If the &quot;<a href=\"http://importpath.name\">importpath.name</a>&quot; argument is omitted,\nthe directive uses the symbol's default object file symbol name and only has\nthe effect of making the symbol accessible to other packages. Because this\ndirective can subvert the type system and package modularity, it is only\nenabled in files that have imported &quot;unsafe&quot;.</p>\n</blockquote>\n<p>What is the use case of this ?</p>\n<blockquote>\n<p>It is only used for accessing unexported function.</p>\n</blockquote>\n<blockquote>\n<p>It's primarily a hack that lets certain functions live in the runtime package,\nand access runtime internals, but still pretend that they are unexported\nfunctions of some different package. Look for the uses of <code>go:linkname</code> in the\nruntime package itself.</p>\n</blockquote>\n<h2>Practice</h2>\n<p>Let's make a <code>time</code> package.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> mono\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token boolean\">_</span> <span class=\"token string\">\"unsafe\"</span> <span class=\"token comment\">// for go:linkname</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//go:linkname now runtime.nanotime1</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int64</span></code></pre>\n<p>The benchmark:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> mono\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"testing\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkNow</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkTimeNow</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The result is amazing.</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">goos: darwin\ngoarch: amd64\npkg: github.com/lotusirous/mono\ncpu: Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\nBenchmarkNow-16        \t40866225\t        29.14 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkTimeNow-16    \t18258596\t        64.80 ns/op\t       0 B/op\t       0 allocs/op\nPASS\nok  \tgithub.com/lotusirous/tstime/mono\t4.260s</code></pre>\n",
      "date_published": "2023-07-02T00:00:00Z"
    },{
      "id": "https://lotusirous.github.io/posts/encoding-json-thing-in-go/",
      "url": "https://lotusirous.github.io/posts/encoding-json-thing-in-go/",
      "title": "encoding/json is weird",
      "content_html": "<p>Let's consider the following snippet</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"encoding/json\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"log\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> Header <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tAlg <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"alg\"`</span>\n\tTyp <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"typ\"`</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tb <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">`{\"typ\":\"JWS\",\"alg\":\"HS256\",\"ALG\":\"none\"}`</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">var</span> h Header\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%+v\"</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The result is surprising : <code>{Alg:none Typ:JWS}</code></p>\n<p>This cause an security issue for token verification in JWT</p>\n",
      "date_published": "2023-06-17T00:00:00Z"
    },{
      "id": "https://lotusirous.github.io/posts/zP-in-vim/",
      "url": "https://lotusirous.github.io/posts/zP-in-vim/",
      "title": "`zy` and `zp` in recent vim ",
      "content_html": "<p>This task is very common for manipulating the column</p>\n<p>Set 1:</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">|of lines.\n|different lengths.\n|now together.</code></pre>\n<p>Set 2:</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">My blocks\nAll have\nBut are</code></pre>\n<p>Result:</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">My blocks|of lines.\nAll have|different lengths.\nBut are|now together.</code></pre>\n<p>The steps as follows:</p>\n<ul>\n<li>Use <code>c-v</code> and <code>D</code> to copy the line in column from Set 2.</li>\n<li>Go the the first line of Set 1 and paste with <code>zP</code></li>\n</ul>\n",
      "date_published": "2023-02-08T00:00:00Z"
    },{
      "id": "https://lotusirous.github.io/posts/zero-allocated-byte-to-string/",
      "url": "https://lotusirous.github.io/posts/zero-allocated-byte-to-string/",
      "title": "Zero allocated byte to string conversion",
      "content_html": "<p>Go has a built-in function for converting a slice of bytes to a string, but it\ninvolves allocating a new string. If you want to avoid this allocation, you can\nuse a trick that involves the <code>unsafe</code> package.</p>\n<p>I recently learned about this trick from a\n<a href=\"https://twitter.com/juliusvolz/status/1603052194944913409?s=20&amp;t=33gnYg4Lbl6dRMzZFu8X0w\">tweet</a>\nin\n<a href=\"https://github.com/prometheus/prometheus/blob/e1b708200853371517480176da0a03437b3bb2c2/tsdb/index/index.go#L1906\">prometheus repository</a>\nand followed\n<a href=\"https://github.com/golang/go/issues/25484\">the discussion on Github</a>. It turns\nout that this trick was originally used in the\n<a href=\"https://go.dev/src/strings/builder.go#L45\"><code>strings</code> package</a>, and it works by\nusing type coercion to convert the memory address of the slice to a string\npointer, and then dereferencing that pointer to get the string value. Here is\nthe code:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">ByteSlice2String</span><span class=\"token punctuation\">(</span>b <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Here's how it works:</p>\n<ol>\n<li><code>unsafe.Pointer(&amp;bs)</code> takes the memory address of the slice bs and converts\nit to an <code>unsafe.Pointer</code>. An <code>unsafe.Pointer</code> is a special type in the\n<code>unsafe</code> package that can hold the address of any type.</li>\n<li><code>(*string)(unsafe.Pointer(&amp;bs))</code> converts the <code>unsafe.Pointer</code> to a string\npointer by performing type coercion. This creates a new string pointer that\npoints to the same memory address as the slice <code>bs</code>.</li>\n<li><code>*(*string)(unsafe.Pointer(&amp;bs))</code> dereferences the string pointer to get the\nstring value that it points to.</li>\n</ol>\n<h2>Prove it</h2>\n<p>This experiment shows the benchmark between the <code>string(bs)</code> and our\n<code>ByteSlice2String</code> function</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n    someBytes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">`hello`</span><span class=\"token punctuation\">)</span>\n    str       <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkByte2String</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    b<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BuiltIn\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n            str <span class=\"token operator\">=</span> <span class=\"token function\">BuiltIn</span><span class=\"token punctuation\">(</span>someBytes<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">ReportAllocs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    b<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Byte2Slice\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n            str <span class=\"token operator\">=</span> <span class=\"token function\">ByteSlice2String</span><span class=\"token punctuation\">(</span>someBytes<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">ReportAllocs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Benchmark result shows that the function <code>ByteSlice2String</code> has zero allocation\nmemory.</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">goos: darwin\ngoarch: amd64\npkg: github.com/ntk12/temp\ncpu: Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\nBenchmarkBuildString\nBenchmarkBuildString/BuiltIn\nBenchmarkBuildString/BuiltIn-16          75249337         15.88 ns/op        5 B/op        1 allocs/op\nBenchmarkBuildString/Byte2Slice\nBenchmarkBuildString/Byte2Slice-16       324706618          3.652 ns/op        0 B/op        0 allocs/op\nPASS\nok   github.com/ntk12/temp 4.461s</code></pre>\n<h2>When this trick goes wrong</h2>\n<p>Using the <code>unsafe</code> package and type coercion to convert a slice of bytes to a\nstring can lead to unpredictable behavior and can compromise the safety\nguarantees provided by Go. It may also produce incorrect results if the slice of\nbytes does not have the correct memory layout or encoding</p>\n<h2>The new way in go 1.20</h2>\n<p>Go 1.20 adds\n<a href=\"https://github.com/golang/go/issues/53003\"><code>SliceData</code>, <code>String</code>, and <code>StringData</code></a>\nwhich supports our cases in\n<a href=\"https://go-review.googlesource.com/c/go/+/427095\">the CL</a>. You can use the new\nfunction as follows:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">ByteSlice2String</span><span class=\"token punctuation\">(</span>b <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">String2ByteSlice</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Slice</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">StringData</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n",
      "date_published": "2022-12-20T00:00:00Z"
    },{
      "id": "https://lotusirous.github.io/posts/byte-order-in-go/",
      "url": "https://lotusirous.github.io/posts/byte-order-in-go/",
      "title": "How to Detect Byte Order in Go",
      "content_html": "<p>The <a href=\"https://github.com/josharian/native\">native package</a> contains a method for\ndetecting byte order in Go. While this can sometimes lead to program portability\nissues, understanding how the package works can greatly improve the developer\nexperience.</p>\n<p>Byte order, also known as endianness, refers to the way in which a computer\nstores the individual bytes of a multi-byte data type in its memory.\nLittle-endian systems store the least significant byte at the lowest memory\naddress, while big-endian systems store the most significant byte at the lowest\nmemory address</p>\n<p>To detect the byte order of a system when working at a low level, you can use\nthe following snippet:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> Endian binary<span class=\"token punctuation\">.</span>ByteOrder\n\n<span class=\"token keyword\">var</span> IsBigEndian <span class=\"token builtin\">bool</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tb <span class=\"token operator\">:=</span> <span class=\"token function\">uint16</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// one byte</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\tEndian <span class=\"token operator\">=</span> binary<span class=\"token punctuation\">.</span>BigEndian\n\t\tIsBigEndian <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tEndian <span class=\"token operator\">=</span> binary<span class=\"token punctuation\">.</span>LittleEndian\n\t\tIsBigEndian <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>In this particular case, the <code>0xff</code> value is being used as a sentinel value to\ndetect the byte order of the system. The <code>0xff</code> value is chosen because it\nconsists of all 1 bits, which means that the most significant bit of the value\nwill be set to 1.</p>\n<p>In a big-endian system, the most significant byte (which in this case would be\n<code>0xff</code>) would be stored at the lowest memory address. Therefore, if the byte\npointed to by the <code>unsafe.Pointer</code> function is equal to 0, it means that the\nsystem is using a big-endian byte order because the <code>0xff</code> value has been\n&quot;truncated&quot; to just <code>0x00</code> due to the fact that the system is only storing the\nleast significant byte at the lowest memory address.</p>\n",
      "date_published": "2022-12-13T00:00:00Z"
    },{
      "id": "https://lotusirous.github.io/posts/flare-on-challenge-1/",
      "url": "https://lotusirous.github.io/posts/flare-on-challenge-1/",
      "title": "Flare on 2020 - Level 1",
      "content_html": "<p>This challenge is a python that have compiled to windows program. The organizer\nalso gives us a source code of this program. Let's dive into the code by static\nanalysis. We have the following functions</p>\n<pre class=\"language-txt\"><code class=\"language-txt\"> +buy_click : function\n +cat_clicked : function\n +decode_flag : function &lt;--\n +game_screen : function\n +main : function\n +password_check : function &lt;--\n +password_fail_screen : function\n +password_screen : function\n +victory_screen : function\n▼ variables\n    buying\n    current_autoclickers\n    current_coins</code></pre>\n<p>It looks like the program has several functions that may be of interest to us.\nIn particular, the <code>password_check</code> and <code>decode_flag</code> functions stand out as\npotentially important.</p>\n<p>To start, let's take a closer look at the <code>password_check</code> function. This\nfunction is likely responsible for verifying the user's password, so it will be\nimportant to understand how it works and what it does. We can examine the code\nline by line to see what it does and how it operates.</p>\n<p>Next, let's move on to the <code>decode_flag</code> function. This function is probably\nresponsible for decoding the flag that we need to find in order to solve the\nchallenge. By analyzing the code in this function, we can learn more about how\nthe flag is encoded and what we need to do to decode it.</p>\n<p><strong>The <code>password_check</code> function</strong></p>\n<p>Since the program requires user to enter a password with a protect screen, the\ndeveloper implements this feature by 2 functions:</p>\n<ul>\n<li><code>password_screen</code> shows the input text.</li>\n<li><code>password_check</code> checks the password as follows</li>\n</ul>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">password_check</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    altered_key <span class=\"token operator\">=</span> <span class=\"token string\">\"hiptu\"</span>\n    key <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> altered_key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">input</span> <span class=\"token operator\">==</span> key</code></pre>\n<p>The solution is trivial, they key is &quot;ghost&quot; by running the code in python\ninterpreter</p>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token string\">\"hiptu\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p><strong>The <code>decode_flag</code> function</strong></p>\n<p>I discovered that the <code>victory_screen</code> function calls the <code>decode_flag</code> function\nby using the &quot;find references&quot; feature from the Language Server Protocol (LSP).\nThe <code>game_screen</code> function calculates the token value using the following logic:</p>\n<pre class=\"language-py\"><code class=\"language-py\">target_amount <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">36</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">35</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> current_coins <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>target_amount <span class=\"token operator\">-</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> current_coins <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span>target_amount <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        current_coins <span class=\"token operator\">-=</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">20</span>\n    victory_screen<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>current_coins <span class=\"token operator\">/</span> <span class=\"token number\">10</span> <span class=\"token operator\">**</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span></code></pre>\n<p>In order to display the victory screen and see the flag, the <code>current_coins</code>\nvariable must have a value greater than <code>(target_amount - 2 ** 20)</code>. To achieve\nthis, we can use the following code:</p>\n<pre class=\"language-python\"><code class=\"language-python\">target_amount <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">36</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">35</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># +1 to jump inside the while loop.</span>\ncurrent_coins <span class=\"token operator\">=</span> target_amount <span class=\"token operator\">-</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">20</span>\n<span class=\"token keyword\">while</span> current_coins <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span>target_amount <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    current_coins <span class=\"token operator\">-=</span> <span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">20</span>\ntoken <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>current_coins <span class=\"token operator\">/</span> <span class=\"token number\">10</span> <span class=\"token operator\">**</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span></code></pre>\n<p>With the <code>token</code> value calculated, we can now call the <code>decode_flag</code> function to\ndecode the flag and print it to the screen:</p>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>decode_flag<span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nidle_with_kitty@flare<span class=\"token operator\">-</span>on<span class=\"token punctuation\">.</span>com</code></pre>\n",
      "date_published": "2020-10-17T00:00:00Z"
    }
  ]
}
