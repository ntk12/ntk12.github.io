<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Kha&#39;s - Journeys and times of me</title>
	<subtitle>This place is a note for myself</subtitle>
	
	<link href="https://lotusirous.github.io/feed/feed.xml" rel="self"/>
	<link href="https://lotusirous.github.io/"/>
	<updated>2022-12-01T00:00:00Z</updated>
	<id>https://lotusirous.github.io/</id>
	<author>
		<name>Your Name Here</name>
		<email>youremailaddress@example.com</email>
	</author>
	
	<entry>
		<title>Golink - URL shorten service</title>
		<link href="https://lotusirous.github.io/posts/golink/"/>
		<updated>2022-12-01T00:00:00Z</updated>
		<id>https://lotusirous.github.io/posts/golink/</id>
		<content type="html">&lt;p&gt;This is the note that I have learn from analyzing pro golang code. The first
post in this series is &lt;code&gt;golink&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Golink&lt;/h1&gt;
</content>
	</entry>
	
	<entry>
		<title>Generate return values in Neovim for Go.</title>
		<link href="https://lotusirous.github.io/posts/function-snippet-for-go/"/>
		<updated>2022-05-28T00:00:00Z</updated>
		<id>https://lotusirous.github.io/posts/function-snippet-for-go/</id>
		<content type="html">&lt;p&gt;I&#39;m a big fan of error handling in Go because of its clarity and simplicity.
However, I sometimes find it tedious to have to type &lt;code&gt;if err != nil&lt;/code&gt; for every
error handling error. That&#39;s why I&#39;m excited to share with you a new technique
that I&#39;ve discovered for reducing the number of keystrokes needed for error
handling in Go. By combining the
&lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter&quot;&gt;nvim-treesitter&lt;/a&gt; and
&lt;a href=&quot;https://github.com/L3MON4D3/LuaSnip&quot;&gt;LuaSnip&lt;/a&gt; tools, you can easily generate
the return values for your error handling errors, saving you time and making
your code more efficient.&lt;/p&gt;
&lt;p&gt;In this post, I&#39;ll explain how to set up and use this technique, so that you can
enjoy the benefits of error handling in Go without all the tedious typing.&lt;/p&gt;
&lt;h2&gt;Tree-sitter and LuaSnip&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Tree-sitter&lt;/strong&gt; is a parser generator tool that can build parsers for
programming languages. It uses incremental parsing to quickly and accurately
parse source code as it is being edited. In Go, tree-sitter can generate an
abstract syntax tree (AST) for a Go source file, which can be used for code
analysis, code completion, or code generation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LuaSnip&lt;/strong&gt; is a neovim plugin that allows users to define and manage code
snippets using Lua. It can save time and improve productivity by allowing users
to insert code snippets quickly and easily. It also offers features like
context-aware expansion, completion, and arguments.&lt;/p&gt;
&lt;h2&gt;Generate the snippet&lt;/h2&gt;
&lt;p&gt;This code defines a tree-sitter query for Go source code that uses the &lt;code&gt;set_query&lt;/code&gt; function from the &lt;code&gt;vim.treesitter&lt;/code&gt; module. The query is stored in a variable called &lt;code&gt;LuaSnip_Result&lt;/code&gt;, and it searches for three different types of declarations in Go source code: method declarations, function declarations, and function literals.&lt;/p&gt;
&lt;p&gt;For each of these declarations, the query stores the result in a variable called &lt;code&gt;@id&lt;/code&gt;, which can be used later to reference the specific declaration that was found. The query uses the tree-sitter query language, which is a syntax for defining and running queries on abstract syntax trees (ASTs) generated by tree-sitter parsers.&lt;/p&gt;
&lt;p&gt;The second part of the code creates a code snippet called &amp;quot;iferr&amp;quot; that uses the results of the &lt;code&gt;LuaSnip_Result&lt;/code&gt; query to automatically generate the return values for the function or method specified in the &amp;quot;f&amp;quot; input field. This can save you time and effort. When you type &amp;quot;iferr&amp;quot; the result will match the function and returned value from the method.&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;treesitter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set_query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;go&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;LuaSnip_Result&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;[[&lt;br /&gt;    (method_declaration result: (_) @id)&lt;br /&gt;    (function_declaration result: (_) @id)&lt;br /&gt;    (func_literal result: (_) @id)&lt;br /&gt;]]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;iferr&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;val&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    t &lt;span class=&quot;token string&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;err&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    t &lt;span class=&quot;token string&quot;&gt;&quot; := &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;f&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;if &quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;same&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; != nil {&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;\treturn &quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; go_ret_vals&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;}&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s give it a try.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iferr&amp;lt;c-k&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In conclusion, this post has shown you how to use tree-sitter and LuaSnip to
create a code snippet for Go development that can automatically generate the
return values for error handling errors. This technique can improve your
workflow and make your code more efficient and effective. By using this
approach, you can reduce the amount of time and effort you spend on error
handling in Go.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Smart contract hacking resources</title>
		<link href="https://lotusirous.github.io/posts/smart-contract-practices/"/>
		<updated>2021-10-17T00:00:00Z</updated>
		<id>https://lotusirous.github.io/posts/smart-contract-practices/</id>
		<content type="html">&lt;p&gt;I&#39;m using the following resources to build up the background to learn/hack the smart contract&lt;/p&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;Books:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mastering Ethereum: Building Smart Contracts and DApps&lt;/li&gt;
&lt;li&gt;Building Ethereum DApps: Decentralized Applications on the Ethereum Blockchain&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tutorials:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ethereum.org/en/developers/learning-tools/&quot;&gt;All tutorials and learning-by-coding from ETH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Learn Solidity&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cryptozombies.io/&quot;&gt;CryptoZombies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://solidity-by-example.org/&quot;&gt;Solidity by Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Solidity Docs&lt;/li&gt;
&lt;li&gt;Learn how to use &lt;a href=&quot;https://hardhat.org/&quot;&gt;HardHat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Familiarize yourself with widely used contracts (EIP 20)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Challenges&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Read writeups &amp;amp; postmortems&lt;/li&gt;
&lt;li&gt;Do some CTF&#39;s&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/M576WGiDBdQ&quot;&gt;Solidity, Blockchain, and Smart Contract Course – Beginner to Expert Python Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.sigmaprime.io/-solidity-security.html&quot;&gt;Solidity Security: Comprehensive list of known attack vectors and common anti-patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://swcregistry.io/&quot;&gt;Smart Contract Weakness Classification and Test Cases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://consensys.github.io/smart-contract-best-practices/&quot;&gt;Ethereum Smart Contract Security Best Practices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>[Flare on 2020] Level 1</title>
		<link href="https://lotusirous.github.io/posts/flare-on-challenge-1/"/>
		<updated>2020-10-17T00:00:00Z</updated>
		<id>https://lotusirous.github.io/posts/flare-on-challenge-1/</id>
		<content type="html">&lt;p&gt;This challenge is a python that have compiled to windows program. The organizer
also gives us a source code of this program. Let&#39;s dive into the code by static
analysis. We have the following functions&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt; +buy_click : function&lt;br /&gt; +cat_clicked : function&lt;br /&gt; +decode_flag : function &amp;lt;--&lt;br /&gt; +game_screen : function&lt;br /&gt; +main : function&lt;br /&gt; +password_check : function &amp;lt;--&lt;br /&gt; +password_fail_screen : function&lt;br /&gt; +password_screen : function&lt;br /&gt; +victory_screen : function&lt;br /&gt;▼ variables&lt;br /&gt;    buying&lt;br /&gt;    current_autoclickers&lt;br /&gt;    current_coins&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It looks like the program has several functions that may be of interest to us.
In particular, the &lt;code&gt;password_check&lt;/code&gt; and &lt;code&gt;decode_flag&lt;/code&gt; functions stand out as
potentially important.&lt;/p&gt;
&lt;p&gt;To start, let&#39;s take a closer look at the &lt;code&gt;password_check&lt;/code&gt; function. This
function is likely responsible for verifying the user&#39;s password, so it will be
important to understand how it works and what it does. We can examine the code
line by line to see what it does and how it operates.&lt;/p&gt;
&lt;p&gt;Next, let&#39;s move on to the &lt;code&gt;decode_flag&lt;/code&gt; function. This function is probably
responsible for decoding the flag that we need to find in order to solve the
challenge. By analyzing the code in this function, we can learn more about how
the flag is encoded and what we need to do to decode it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The &lt;code&gt;password_check&lt;/code&gt; function&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since the program requires user to enter a password with a protect screen, the
developer implements this feature by 2 functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;password_screen&lt;/code&gt; shows the input text.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password_check&lt;/code&gt; checks the password as follows&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-py&quot;&gt;&lt;code class=&quot;language-py&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;password_check&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    altered_key &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hiptu&quot;&lt;/span&gt;&lt;br /&gt;    key &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;join&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; altered_key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; key&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The solution is trivial, they key is &amp;quot;ghost&amp;quot; by running the code in python
interpreter&lt;/p&gt;
&lt;pre class=&quot;language-py&quot;&gt;&lt;code class=&quot;language-py&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;join&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hiptu&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;The &lt;code&gt;decode_flag&lt;/code&gt; function&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I discovered that the &lt;code&gt;victory_screen&lt;/code&gt; function calls the &lt;code&gt;decode_flag&lt;/code&gt; function
by using the &amp;quot;find references&amp;quot; feature from the Language Server Protocol (LSP).
The &lt;code&gt;game_screen&lt;/code&gt; function calculates the token value using the following logic:&lt;/p&gt;
&lt;pre class=&quot;language-py&quot;&gt;&lt;code class=&quot;language-py&quot;&gt;target_amount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; current_coins &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target_amount &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; current_coins &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target_amount &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        current_coins &lt;span class=&quot;token operator&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;br /&gt;    victory_screen&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;current_coins &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to display the victory screen and see the flag, the &lt;code&gt;current_coins&lt;/code&gt;
variable must have a value greater than &lt;code&gt;(target_amount - 2 ** 20)&lt;/code&gt;. To achieve
this, we can use the following code:&lt;/p&gt;
&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;target_amount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# +1 to jump inside the while loop.&lt;/span&gt;&lt;br /&gt;current_coins &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; target_amount &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; current_coins &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target_amount &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    current_coins &lt;span class=&quot;token operator&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;br /&gt;token &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;current_coins &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the &lt;code&gt;token&lt;/code&gt; value calculated, we can now call the &lt;code&gt;decode_flag&lt;/code&gt; function to
decode the flag and print it to the screen:&lt;/p&gt;
&lt;pre class=&quot;language-py&quot;&gt;&lt;code class=&quot;language-py&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;decode_flag&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;token&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;idle_with_kitty@flare&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;on&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;com&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
</feed>
